# Import the Active Directory module if not already loaded
Import-Module ActiveDirectory

# Get the local computer's hostname
$localComputerName = $env:COMPUTERNAME

# Get the local computer's IP address
$localIPAddress = (Get-NetIPAddress | Where-Object { $_.AddressFamily -eq 'IPv4' }).IPAddress

# Query Active Directory to get all domain-connected computers
$allDomainComputers = Get-ADComputer -Filter * | Select-Object -ExpandProperty Name

# Exclude the local computer from the list
$domainComputers = $allDomainComputers | Where-Object { $_ -ne $localComputerName -and $_ -ne $localIPAddress }

# Display or use the list of domain-connected computers
#$domainComputers

# Get all networked computers in the specified domain and store them in an array
#$domaincomputers = Get-ADComputer -Filter * | Select-Object -ExpandProperty Name

# Display the list of networked computers
#$computers
#| Select-Object PSComputername, interfacename, interfacedescription, status, linkspeed
foreach($computer in $domaincomputers){
    $netinfo = Get-NetAdapter -name * -Cimsession "$computer" -ErrorAction SilentlyContinue 
    $os = Get-CimInstance -ClassName Win32_operatingsystem -ComputerName $Computer -ErrorAction SilentlyContinue 
    $cdrive = Get-WMIObject win32_logicaldisk -filter "DeviceID='c:'" -computername $Computer -ErrorAction SilentlyContinue
    $ipaddress = Get-Netipaddress -Cimsession "$computer" -InterfaceAlias ethernet -ErrorAction SilentlyContinue
    # Extract IPv4 and IPv6 addresses from the $localipinfo object
$ipv4Addresses = $ipaddress | Where-Object { $_.AddressFamily -eq 'IPv4' } | ForEach-Object { $_.IPAddress }
$ipv6Addresses = $ipaddress | Where-Object { $_.AddressFamily -eq 'IPv6' } | ForEach-Object { $_.IPAddress }
    
    
    $Properties = [ordered]@{'Computername' = $Computer;
                'OS'                                = $os.Caption;
                'C:_GB_Free'                        = [math]::round($cdrive.FreeSpace / 1GB);
                'ipv4address'                       = $ipv4Addresses -join ', ' # Join IPv4 addresses if there are multiple
                'ipv6address'                       = $ipv6Addresses -join ', ' # Join IPv6 addresses if there are multiple
                'interfacename'                     = $netinfo.interfacename;
                'interfacedescription'              = $netinfo.interfacedescription;
                'networkstatus'                     = $netinfo.Status;
                'linkspeed'                         = $netinfo.LinkSpeed;
                }
write-output $Properties | FT -AutoSize

    
    }
$localnetinfo = Get-NetAdapter
$localos = Get-ComputerInfo
$localcdrive = Get-Volume -DriveLetter C
$localipinfo = Get-NetIPAddress -InterfaceAlias ethernet

# Extract IPv4 and IPv6 addresses from the $localipinfo object
$lipv4Addresses = $localipinfo | Where-Object { $_.AddressFamily -eq 'IPv4' } | ForEach-Object { $_.IPAddress }
$lipv6Addresses = $localipinfo | Where-Object { $_.AddressFamily -eq 'IPv6' } | ForEach-Object { $_.IPAddress }

$LProperties = [ordered]@{
    'Computername'        = $localos.CSName
    'OS'                  = $localos.OSName
    'C:_GB_Free'          = [math]::Round($localcdrive.SpaceRemaining / 1GB)
    'IPv4Address'         = $lipv4Addresses -join ', ' # Join IPv4 addresses if there are multiple
    'IPv6Address'         = $lipv6Addresses -join ', ' # Join IPv6 addresses if there are multiple
    'InterfaceName'       = $localnetinfo.InterfaceName
    'InterfaceDescription'= $localnetinfo.InterfaceDescription
    'NetworkStatus'       = $localnetinfo.Status
    'LinkSpeed'           = $localnetinfo.LinkSpeed
}

# Display the properties using Format-Table
$LProperties | FT -AutoSize

